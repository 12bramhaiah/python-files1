class Solution(object):
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        nums.sort()  # Sort the array to use the two-pointer approach
        n = len(nums)
        closest_sum = float('inf')  # Initialize with a very large value

        for i in range(n - 2):
            # Skip duplicate elements for the first pointer
            if i > 0 and nums[i] == nums[i-1]:
                continue

            left, right = i + 1, n - 1

            while left < right:
                current_sum = nums[i] + nums[left] + nums[right]

                # If the current sum is exactly the target, return it
                if current_sum == target:
                    return current_sum

                # Update closest_sum if the current sum is closer to target
                if abs(current_sum - target) < abs(closest_sum - target):
                    closest_sum = current_sum

                # Adjust pointers based on the comparison with target
                if current_sum < target:
                    left += 1
                else:
                    right -= 1
        return closest_sum
