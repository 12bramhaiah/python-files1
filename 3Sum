class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()  # Sort the array to efficiently use the two-pointer technique
        n = len(nums)
        result = []

        for i in range(n - 2):
            # Skip duplicate elements for the first number of the triplet
            if i > 0 and nums[i] == nums[i - 1]:
                continue

            left, right = i + 1, n - 1  # Initialize two pointers

            while left < right:
                current_sum = nums[i] + nums[left] + nums[right]

                if current_sum == 0:
                    result.append([nums[i], nums[left], nums[right]])
                    # Skip duplicate elements for the second and third numbers
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1
                    left += 1
                    right -= 1
                elif current_sum < 0:
                    left += 1  # Increase left pointer to get a larger sum
                else:
                    right -= 1 # Decrease right pointer to get a smaller sum
        return result
