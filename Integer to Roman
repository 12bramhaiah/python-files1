class Solution(object):
    def intToRoman(self, num):
        """
        :type num: int
        :rtype: str
        """
        # A list of tuples mapping integer values to Roman symbols, sorted in descending order
        value_symbols = [
            (1000, "M"),
            (900, "CM"),
            (500, "D"),
            (400, "CD"),
            (100, "C"),
            (90, "XC"),
            (50, "L"),
            (40, "XL"),
            (10, "X"),
            (9, "IX"),
            (5, "V"),
            (4, "IV"),
            (1, "I")
        ]
        
        result = []
        
        # Iterate through the Roman values from largest to smallest
        for value, symbol in value_symbols:
            if num == 0:
                break
            
            # Use divmod to find how many times the current value fits into num
            count, num = divmod(num, value)
            
            # Append the symbol repeatedly based on the count
            if count > 0:
                result.append(symbol * count)
        
        return "".join(result)

